/***
Set

A multiset ''MS'' is a specific set which can have "repeated" occurence
of the same objects.
***/

type OrderedSet : Set as OS {
// To be implemented.
  func lt (elt_1 : InSet) -> (elt_2 : InSet) -> \B

// Auto. API.
  func gt (elt_1 : InSet) -> (elt_2 : InSet) -> \B {
    return (lt elt_2 elt_1)
  }

  func lte (elt_1 : InSet) -> (elt_2 : InSet) -> \B {
    return ((equal elt_1 elt_2) or (lt elt_1 elt_2))
  }

  func gte (elt_1 : InSet) -> (elt_2 : InSet) -> \B {
    return ((equal elt_1 elt_2) or (gt elt_1 elt_2))
  }
}


type TotalOrderedSet : OrderedSet as TOS {
  axiom {
    totally_ordered :=
      foral x y in TOS ,
      (equal x y) or (lt x y) or (gt x y)
  }

// We don't want to type ''TOS.max'' and ''TOS.min''!
  parse "max {a} {b}" as (max a b) ,
        "min {a} {b}" as (min a b) ,

  fix func max (elt_1 : InSet) -> (elt_2 : InSet) -> InSet {
    return (
      if (gt elt_1 elt_2) elt_1 elt_2
    )
  }

  fix func min (elt_1 : InSet) -> (elt_2 : InSet) -> InSet {
    return (
      if (lt elt_1 elt_2) elt_1 elt_2
    )
  }
}
