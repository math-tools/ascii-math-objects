/***
Group

A group ''G'' is a monoid such that any element ''x'' admits an inverse
''x_inv'' verifying ''G.op x x_inv = G.id'' and ''G.op x_inv x = G.id''.
***/

type Group : Monoid as G {
  axiom {
    inverse :=
      forall x in G ,
      exist x_inv in G ,
      (op x x_inv = id) and (op x_inv x = id)
  }

  func inv (x : G.InSet) -> G.InSet {
    axiom {
      is_inverse :=
        forall x in G ,
        (op x (inv x) = id) and (op (inv x) x = id)
    }
  }
}
