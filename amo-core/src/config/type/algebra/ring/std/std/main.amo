/***
Ring

A ring ''R'' is a set with two binary operations ''R.op_add'' and
''R.prod'' verfiying the following properties.

    1) ''R.op_add'' defines an abelian group structure with ''R.id_add''
    as neutral element.

    2) ''R.prod'' defines a monoid structure with ''R.id_prod'' as neutral
    element.

    3) ''R.op_add'' and ''R.prod'' verify two distribution laws, one on
    the left and the other on the right, as do addition and multiplication
    on natural numbers.

    4) The identities for ''R.op_add'' and ''R.prod'' are different.
***/

type Ring as R {
  var GrpOpAdd   : GroupAbelian ,
      MonoOpProd : Monoid

  alias_from {
    "GrpOpAdd.{name}" (
      op_add      : op_add    ,
      id_add      : id        ,
      plus_ntimes : op_ntimes
    )

    "MonoOpProd.{name}" (
      op_prod     : prod      ,
      id_prod     : id        ,
      prod_ntimes : op_ntimes
    )
  }

  axiom {
    same_dom_for_grp_and_mono :=
      (set R = set MonoOpProd) and (set R = set GrpOpAdd)

    non_trivial :=
      id_add != id_prod

    left_distrib :=
      forall x y z in R ,
      prod x (op_add y z) = op_add (prod x y) (prod x z)

    right_distrib :=
      forall x y z in R ,
      prod (op_add x y) z = op_add (prod x z) (prod y z)
  }
}
