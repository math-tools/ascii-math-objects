/***
Boolean

warning::
    Because the ''Set'' type uses the membership operator of type
    ''Untyped -> \B'', we can't derive ''BoolSet'' from ''Set''.


A boolean "set" ''B'' needs an "hard coded" ''in'' function using
the hidden untyped constants ''_true'' and ''_false''.


caution::
    We will expowse later public ''true'' and ''false''.
***/

const _true  : Untyped ,
      _false : Untyped


type BoolSet : Untyped as B {
  parse "{x1, ...} in B" as (in x1 = _true , ...)

  type InSet as Elt {
    axiom {
      is_bool := (Elt = _true or Elt = _false)
    }
  }

// We can use the following shorcut because ''(elt : InSet)'' is
// a core boolean, a kind of meta boolean, and it's not a ''Bool''
// that we will build later.
  fix func in (elt : Untyped) -> Untyped {
    return (elt : InSet)
  }
}
