/***
Some natural-like and fintie structure needs constructions using
iterative application of the same endo-application.

note::
  The suffix ''ns'' in ''iter_set_ns'' stands for "N.o S.tart", but
  the ''start'' element can be achieved when the application is not
  injective.
***/

fix func iter_set (appli : Set -> Set) -> (start : Unspec) -> Set {
  var new_set : Set

  fix func new_set.in (elt : Unspec) -> \B {
    return (
      match elt with
        | start      -> true
        | appli ante -> new_set.in ante
        | _          -> false
    )
  }

  return new_set
}


fix func iter_set_ns (appli : Set -> Set) -> (start : Unspec) -> Set {
  return iter_set appli (appli start)
}


fix func equal_iter (appli : Unspec -> Unspec)
                 -> (start_1 : Unspec, start_2 : Unspec)
                 -> (obj_1 : Unspec, obj_2 : Unspec)
                 -> \B
{
  return (
    match obj_1 , obj_2 with
      | start_1         , start_2         -> true
      | appli pre_obj_1 , appli pre_obj_2 -> equal_iter appli
                                                        (start_1   , start_2)
                                                        (pre_obj_1 , pre_obj_2)
      | _                                 -> false
  )
}


fix func lt_iter (appli : Unspec -> Unspec)
              -> (start : Unspec)
              -> (obj_1 : Unspec, obj_2 : Unspec)
              -> \B
{
  return (
    match obj_1 , obj_2 with
      | start    , start                  -> false
      | _        , start                  -> false
      | start    , _                      -> true
      | appli pre_obj_1 , appli pre_obj_2 -> lt_iter appli
                                                     start
                                                     (pre_obj_1 , pre_obj_2)
      | _                                 -> false
  )
}


fix func lte_iter (appli : Unspec -> Unspec)
               -> (start : Unspec)
               -> (obj_1 : Unspec, obj_2 : Unspec)
               -> \B
{
  return (
    match obj_1 , obj_2 with
      | start           , _               -> true
      | _               , start           -> false
      | appli pre_obj_1 , appli pre_obj_2 -> lte_iter appli
                                                      start
                                                      (pre_obj_1 , pre_obj_2)
      | _                                 -> false
  )
}


fix func iter_ntimes (appli : Unspec -> Unspec)
                  -> (zero_case : Unspec)
                  -> (start : Unspec)
                  -> (nb : Nat)
                  -> Unspec
{
  return (
    match nb with
      | zero  -> zero_case
      | _     -> __iter_ntimes_non_zero__ appli start nb
  )
}

// We must have nb > 0.
fix func __iter_ntimes_non_zero__ (appli : Unspec -> Unspec)
                               -> (start : Unspec)
                               -> (nb : Nat)
                               -> Unspec
{
  return (
    match nb with
      | succ zero   -> start
      | succ pre_nb -> iter_ntimes appli (appli start) pre_nb
  )
}
