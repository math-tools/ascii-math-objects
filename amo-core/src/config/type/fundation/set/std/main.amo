/***
Set

A set ''S'' is simply an object with a "membership" operator ''S.in'' which
"associates" any object to a standard boolean value.

The following shortcuts are available without limit to the number of arguments.

    * ''x in S'' stands for ''S.in x = true''.

    * ''x y in S'' stands for the conjunction
    ''S.in x = true , S.in y = true''.

    * ''x y z in S'' stands for the conjunction
    ''S.in x = true , S.in y = true , S.in z = true''.

    * ...
***/

type Set : ExplicitFiniteSet as S {
  parse "{x1, ...} in S" as (in x1 = true , ...)

// Trick: we impose the interface but we accept an laready exited implmentation thanks to ''ExplicitFinieSet'' becomes affective special Set. This is possible because the \api of ''ExplicitFiniteSet'' is not "bigger" than the ''Set'' one.
  func in : Untyped -> \B

  type InSet as Elt {
    axiom {
      elt_of_set := Elt in S
    }
  }
}
