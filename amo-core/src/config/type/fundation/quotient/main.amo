/***
Generic quotient

The ''QuotientOf'' type is a parametric one defining a versatile quotient
''QType'' type from the type argument ''PreQT'', and the structure of the
quotient type is specified by the argument type ''QFtype'' (all arguments
must be "transtypable" into ''Set'').

For example, let's suppose that we want to construct ''Z'' via the classical
quotient structure on ''N * N''. This construction could start using
''QuotientOf (NatSet * NatSet | IntSet)'' and then specifying the operation
regarding the ''cano_surj'' and ''repr'' functions. We will use this strategy
to define quotient fields of integral domains which allows to easily defined
the standard rational numbers set.

warning::
    This parametric type must be used only if no direct definition is possible
    (for example, we won't use it to define the quotient field of an integral
    domain).

Here is a possible way to not follow to define the quotient fiel of an integral domain.

amo::
    type QuotFieldOf (DR : IntDomain , QFtype : Field) as QF {
      var QF : QuotientOf (DR * DR , Field)

      type_ext QF : QFtype

      axiom {
        cano_surj_spec :=
          forall n_1 n_2 in DR ,
          forall d_1 d_2 in DR.GrpOpProd ,
          cano_surj n_1 d_1 = cano_surj n_2 d_2
          <==>
          DR.prod n_1 d_2 = DR.prod n_2 d_1

        proj_add_spec :=
          forall n_1 n_2 in DR ,
          forall d_1 d_2 in DR.GrpOpProd ,
          add (cano_surj n_1 d_1) (cano_surj n_2 d_2)
          =
          cano_surj (DR.add (DR.prod n_1 d_2) (DR.prod n_2 d_1))
                    (DR.prod d_1 d_2)

        proj_prod_spec :=
          forall n_1 n_2 in DR ,
          forall d_1 d_2 in DR.GrpOpProd ,
          prod (cano_surj n_1 d_1) (cano_surj n_2 d_2)
          =
          cano_surj (DR.prod n_1 n_2) (DR.prod d_1 d_2)
      }
    }


ref::
    title   = Pragmatic Quotient Types in Coq
    version = Pre-publication
    author  = Cyril, Cohen
    url     = https://perso.crans.org/cohen/papers/quotients.pdf
              [2024-07-15]
***/

type QuotientOf (PreQT : Set , QType : Set) as Qof {
  type_ext Qof : QType

  var cano_surj : PreQT -> Qof ,
      repr      : Qof -> PreQT

  axiom {
    universal_diagram :=
      forall x in Qof ,
      cano_surj (repr x) = x
  }
}
