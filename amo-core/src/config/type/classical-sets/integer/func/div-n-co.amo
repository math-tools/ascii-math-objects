/***
--------------------------
Euclidean \div and its use
--------------------------

We implement the following \funcs.

    1) Euclidean \div.

    1) Just the quotient of an euclidean \div.

    1) Just the remainder of an euclidean \div.

    1) gcd' and lcm' of two \nats.
***/

with (Z : Z.InSetSet , N : N.InSetSet) in {
  fix func div (a : Z.InSet)
            -> (b : Z.NonZeroSet.InSet)
            -> (Z.InSet * Z.InSet)
  {
// Let's work in ''NatSet''.
    var (_q_abs , _r_abs) := div (cano_inj_to_nat (abs a))
                                 (cano_inj_to_nat (abs b))

// Let's go back into ''IntSet''.
    var q_abs := cano_inj _q_abs,
        r_abs := cano_inj _r_abs

    return (
      match (sign a , sign b , r_abs) with
        | (zero , _ , _)
            -> q_abs , r_abs
        | (one , one , _)
            -> q_abs , r_abs
        | (one , minus_one , _)
            -> (oppo q_abs) , r_abs
        | (minus_one , one , zero)
            -> (oppo q_abs) , r_abs
        | (minus_one , one , _)
            -> succ (oppo q_abs) , b + (oppo r_abs)
        | (minus_one , minus_one , zero)
            -> q_abs , r_abs
        | (minus_one , minus_one , _)
            -> q_abs + one , (oppo b) + (oppo r_abs)
    )

  }


  fix func quot (a : Z.InSet)
             -> (b : Z.NonZeroSet.InSet)
             -> Z.InSet
  {
    var (q , _) := (div a b)

    return q
  }


  fix func rem (a : Z.InSet)
            -> (b : Z.NonZeroSet.InSet)
            -> Z.InSet
  {
    var (_ , r) := (div a b)

    return r
  }


  fix func gcd (a : Z.NonZeroSet.InSet)
            -> (b : Z.NonZeroSet.InSet)
            -> Z.InSet
  {
    return (
      gcd (cano_inj_to_nat (abs a))
          (cano_inj_to_nat (abs b))
    )
  }


  fix func lcm (a : Z.NonZeroSet.InSet)
            -> (b : Z.NonZeroSet.InSet)
            -> Z.InSet
  {
    return (
      lcm (cano_inj_to_nat (abs a))
          (cano_inj_to_nat (abs b))
    )
  }
}
