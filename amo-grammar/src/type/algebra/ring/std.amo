type Ring : (GroupAbelian as R_GrpPlus | Monoid as R_MonoProd) as R

    + alias op_plus : R_GrpPlus.op  , id_plus : R_GrpPlus.id  ,
            op_prod : R_MonoProd.op , id_prod : R_MonoProd.id ,

    + axiom
        // Equalities are just about the set structures, so we need
        // to transtype ''R'', ''R_MonoProd'' and ''R_GrpPlus''.
        + same_dom_for_grp_and_mono : set R = set R_MonoProd ,
                                      set R = set R_GrpPlus

        + non_trivial : id_plus != id_prod

        + left_distrib : forall x y z in R ,
                         op_prod x (op_plus y z)
                         =
                         op_plus (op_prod x y) (op_prod x z)

        + right_distrib : forall x y z in R ,
                          op_prod (op_plus x y) z
                          =
                          op_plus (op_prod x z) (op_prod y z)

    + desc
        A ring amo::''R'' is a set with two binary operations
        amo::''R.op_plus'' and amo::''R.op_prod'' verfiying
        the following properties.

            1) amo::''R.op_plus'' defines an abelian group structure with
            amo::''R.id_plus'' as neutral element.

            2) amo::''R.op_prod'' defines a monoid structure with
            amo::''R.id_prod'' as neutral element.

            3) amo::''R.op_plus'' and amo::''R.op_prod'' verify two
            distribution laws, one on the left and the other on the right,
            as do addition and multiplication on natural numbers.

            4) The identities for amo::''R.op_plus'' and amo::''R.op_prod''
            are different.
