/***
Natural number set

A natural-numbers-like set is an "add" monoid with an additional binary
"prod" operation respecting the Peano axioms with the more precise
''succ_iter_zero_is_N'' axiom instead of the ''predecessor'' and the
inductive axioms suchas to know that any element of ''N'' becomes from
a finite number of successive applications of the ''succ'' function on
''zero''.

note::
    It is easy to see that ''one := succ zero'' has no action on products.

    verbatim::
        x * one
        =
        x * (succ zero)
        =
        (x * zero) + x
        =
        zero x
        =
        x

note::
    ''forall x in N , x!= 0 ==> (exist x_pr in N , x = succ x_pr)'' is
    the ''predecessor'' axiom . We don't use it because it allows the
    existence of non-standard natural sets, without the ''induction''
    axiom, whereas the ''succ_iter_zero_is_N'' does not correspond to
    any non-standard natural sets and it gives the induction principle.
***/

type NatSet : MonoidAdd as N {
  func succ : N -> N      ,
       prod : N -> N -> N

  parse "{x} * {y}" as (prod x y)

  axiom {
    zero_min :=
      forall x in N ,
      zero != succ x

    succ_injective :=
      forall x y in N ,
      succ x = succ y ==> x = y

    succ_iter_zero_is_N :=
      iter_set succ zero = N

    add_induc_def :=
      forall x y in N ,
      succ (x + y) = x + (succ y)

    zero_absorbent :=
      forall x in N ,
      zero * x = zero

    prod_induc_def :=
      forall x y in N ,
      x * (succ y) = (x * y) x
  }
}
