type NatSet : MonoidPlus as N

    // A name change just for consistency.
    + alias op_plus : N.op

    + func succ    : N -> N ,
           op_prod : N -> N

    + parse "{x} * {y}" as op_prod x y

    + axiom
        + zero_min       : forall x in N    , zero != succ x
        + succ_injective : forall x, y in N , succ x = succ y ==> x = y
        + succ_iter_set  : iter_set succ zero = N
        + plus_induc_def : forall x, y in N , succ(x + y) = x + (succ y)
        + zero_absorbent : forall x in N    , zero * x = zero
        + prod_induc_def : forall x, y in N , x * (succ y) = (x * y) + x

    + desc
        A natural-numbers-like set is a "plus" monoid with an additional
        binary "prod" operation respecting the Peano axioms with the more
        precise ''succ_iter_set'' axiom instead of the ''predecessor''
        axiom suchas to know that any element of amo::''N'' becomes from
        a finite number of successive applications of the amo::''succ''
        function on amo::''zero''.

    + note
        The ''predecessor'' axiom states that
        amo::''forall x in N , x!= 0 ==> (exist x_pr in N , x = succ x_pr)''.
        The problem with this axiom is that it allows the existence of
        non-standard natural sets, unlike the ''succ_iter_set'' axiom, but
        the latter must admit the existence of finite sets.


        For example, it is easy to see that amo::''one = succ zero'' has no
        action on products.

        verbatim::
            x * one
            =
            x * (succ zero)
            =
            (x * zero) + x
            =
            zero + x
            =
            x
