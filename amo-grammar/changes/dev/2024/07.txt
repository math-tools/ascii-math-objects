// ---------- //


==
23  (0.0.0-alpha.10)
==

-----
:new:
-----

[[:api:]]
Types.

    1) New \funcs for the natural \nbs.

        * ''lt'', 'lte'', ''gt'' and ''gte'' for ''<'', '<='', ''>'' and ''>=''.

        * ''min'', ''max'' and ''diff_up''.

    1) New ''MultiSet'' and ''EmptyMultiSet'' types with ''sum'', ''union'', ''inter'' and ''diff'', but no ''prod''.

    1) The versatile ''equal'' has been implemented using the new directive ''tokenize'' for which internal equality means same writing after "expansion": for example, ''succ (succ zero)'' is equal to itslef, but also to ''succ one'' if ''one := succ zero''.


--------
:update:
--------

[[:api:]]
Types: ''NatSet : MonoidAdd'' has moved to ''NatSet : Set''.  ???


// ---------- //


==
22  (0.0.0-alpha.9)
==

-----
:new:
-----

[[:api:]]
Types.

    1) New things for sets.

        * \Cst ''empty_set'' that can be written ''{}''.

        * Product, union, intersection and difference of two sets implemented.

    1) The core \func ''iter_set'' and ''iter_set_ns'' have been added.

    1) Non lexical equalities between same typable \objs must be implemented using the special \func ''equal'' with \signs ''OneType -> OneType -> \B''.

        * Equality between ''Set'' type \objs specified.

        * Equality between natural \nbs added.

    1) New ''fix'' directive to avoid the change of \objs like the ''in'' function of ''Set'' \obj (a function can have \diff fixed version regarding the \sign used).
    From now, ''const'', ''var'' and ''func'' are basic internal fundamental kinds of \obj (''fix const'' is meaningless).


-------
:break:
-------

[[:api:]]
Types: use of the ''{ ... }'' syntax instead of the messy ''+ ...'' one.


--------
:update:
--------

[[:api:]]
Types.

    1) Axioms use '':='' instead of '':'' for logical reasons.

    1) The \sign ''M -> M -> M'' is preferred to ''M * M -> M'' (it's more convenient).

        * ''or'' and ''and'' have the type ''\B -> \B -> \B''.

        * For magmas, ''op'' has the type ''M -> M -> M''.

    1) Use of ''NegSet'' and ''PosSet'' instead of ''Z_non_neg'' and ''Z_non_pos'' for the ''IntSet'' type.

    1) The path::''core'' folder groups together specific, indispensable functionalities such as the ''Untyped'' type, the booleans, the iterative constructions on set-like types....

    1) \Specs for natural \nb \objs become core ones.


-----
:fix:
-----

[[:api:]]
Types.

    1) For integral domain, subtype ''Domain'' was missing in ''type IntDomain : Domain''.

    1) ''var id in M'' muste have been transofrmed into ''var id : Untyped'' followed by the axiom ''neutral_elt := id in M''.


// ---------- //


==
21  (0.0.0-alpha.8)
==

-----
:new:
-----

[[:api:]]
Types.

    1) \Desc and notes in the \specs have been moved into a special comment, and we use of a versatile \tnsdoc like \doc.

    1) ''type-ext' block becomes the ''ext'' directive (this is more logical).

    1) Boolean set implementing using a small trick.

    1) ''func'' can be implemnted: only match \ocmal-like can be used at this time.

    1) ''const'' automatically guesses the type.


-----
:fix:
-----

[[:api:]]
Types: ''var id in M'' instead of ''const type id in M''.


// ---------- //


==
16
==

-----
:fix:
-----

[[:api:]]
Types: no need to use an hidden amo::''_QStruct'' field type.


// ---------- //


==
15  (0.0.0-alpha.7)
==

-----
:new:
-----

[[:api:]]
Types.

    1) Domain and integral domain types.

    1) Parametric types allow to build types from type \args.

    1) Special quotient types.

        + The versatile "universal" quotient type.

        + The quotient field of an integral domain.

        + The rational field.

    1) Hidden \objs must have a name starting with an \_.

    1) ''alias_from'' tries to simplify aliasing from the same \obj.


--------
:update:
--------

[[:api:]]
Types: simplification of the naming of public object (no need to use extra prefix)


-----
:fix:
-----

[[:api:]]
Types: the \prev field type was just a division ring one. We have updated the \specs and add a field type with a mandatory abelian \prod.


// ---------- //


==
14  (0.0.0-alpha.6)
==

-----
:new:
-----

[[:api:]]
Types: the parsing rule amo::''"{x1, x2, ...}"'' allows to use unbounded \nb of \args.


-----
:fix:
-----

[[:api:]]
Types.

    1) Ring type: clarifications needed about the double structure of the domain set.

    1) The field type needs to say that the "prod" \grp structure is obtained without the zero-like \elt.

    1) The \int type needs to work with "non-\pos" and "non-\neg" \elts instead of "\pos" and "\neg" ones.


// ---------- //


==
13  (0.0.0-alpha.5)
==

-----
:new:
-----

[[:api:]]
Types: the definitions of natural and integer sets look good.


// ---------- //


==
13  (0.0.0-alpha.4)
==

-----
:new:
-----

[[:api:]]
Types: for an endo\func amo::''func f : S -> S'' and amo::''e in S'', we have a built-in recursive rule amo::''iter_set f e'' which is the subset of amo::''S'' obtained from amo:''{e}'' by iteratively applying amo::''f'' a finite number of times.


// ---------- //


==
12  (0.0.0-alpha.3)
==

-----
:new:
-----

[[:api:]]
Types: redefining and erasing axioms is now possible.


// ---------- //


==
12  (0.0.0-alpha.2)
==

-----
:new:
-----

[[:api:]]
Types: the rules look good. We still need to define other default types to identify any missing concepts.


// ---------- //


==
12  (0.0.0-alpha.1)
==

-----
:new:
-----

[[:doc:]]
Naming: conventions have been added.


// ---------- //


==
09  (0.0.0-alpha.0)
==

Starting this \proj that defines an \ascii \dsl made to facilitate the writing and the manipulations of \math \objs.
