// ---------- //


==
??  (0.0.0-alpha.7)
==

-----
:new:
-----


n algebra, a domain is a nonzero ring in which ab = 0 implies a = 0 or b = 0.[1] (Sometimes such a ring is said to "have the zero-product property".) Equivalently, a domain is a ring in which 0 is the only left zero divisor (or equivalently, the only right zero divisor). A commutative domain is called an integral domain.[1][2] Mathematical literature contains multiple variants of the definition of "domain".[3]



[[:api:]]
Types.

    1) Domain and integral domain types.

    1) ???
    Parametrized types such as to define a versatile quotient type.

    1) Special quotient types.

        + ???
        The quotient field of an integral domain.

        + ???
        The rational field.


-----
:fix:
-----

[[:api:]]
Types: the \prev field type was just a division ring one. We have updated the \specs and add a field type with an abelian product.


// ---------- //


==
14  (0.0.0-alpha.6)
==

-----
:new:
-----

[[:api:]]
Types: the parsing rule amo::''"{x1, x2, ...}"'' allows to use unbounded \nb of \args.


-----
:fix:
-----

[[:api:]]
Types.

    1) Ring type: clarifications needed about the double structure of the domain set.

    1) The field type needs to say that the "prod" \grp structure is obtained without the zero-like \elt.

    1) The \int type needs to work with "non-\pos" and "non-\neg" \elts instead of "\pos" and "\neg" ones.


// ---------- //


==
13  (0.0.0-alpha.5)
==

-----
:new:
-----

[[:api:]]
Types: the definitions of natural and integer sets look good.


// ---------- //


==
13  (0.0.0-alpha.4)
==

-----
:new:
-----

[[:api:]]
Types: for an endofunction amo::''func f : S -> S'' and amo::''e in S'', we have a built-in recursive rule amo::''iter_set f e'' which is the subset of amo::''S'' obtained from amo:''{e}'' by iteratively applying amo::''f'' a finite number of times.


// ---------- //


==
12  (0.0.0-alpha.3)
==

-----
:new:
-----

[[:api:]]
Types: redefining and erasing axioms is now possible.


// ---------- //


==
12  (0.0.0-alpha.2)
==

-----
:new:
-----

[[:api:]]
Types: the rules look good. We still need to define other default types to identify any missing concepts.


// ---------- //


==
12  (0.0.0-alpha.1)
==

-----
:new:
-----

[[:doc:]]
Naming: conventions have been added.


// ---------- //


==
09  (0.0.0-alpha.0)
==

Starting this \proj that defines an \ascii \dsl made to facilitate the writing and the manipulations of \math objects.
