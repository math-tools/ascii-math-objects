// ---------- //


==
16  (0.0.0-alpha.8)  ????
==

-----
:new:
-----

boolean : pénible !!! type primitif ??? true et false clé en main ???


[[:api:]]
Types.

    1) ??? indentation et plus de +

    1) ct est générale donc s'applique au fonction cf \B.or par exemple

    1) ??? clarifier ds les axiomes la notion d'appartenance TOUT REVOIR TRNAUILLEMENT



    1) func in : Untyped -> B pour fonction de n'importe où vers vers bool


    1) Description and note in the specific tions have been moved into a special comment.

    1) The constants are briefly described.

    1) New types.

        + ?? Boolean primitive (it can be a set to avaoid viious circle).

        + ?? Semigroup and semiring.

        + ?? Several ordered structures.

        + ?? The real and complex fields.


??? func non modifiable pour API facile

    --> ???
        func* not := \B.not ,
              or  := \B.or



// ---------- //


==
16
==

-----
:fix:
-----

[[:api:]]
Types: no need to use an hidden amo::''_QStruct'' field type.


// ---------- //


==
15  (0.0.0-alpha.7)
==

-----
:new:
-----

[[:api:]]
Types.

    1) Domain and integral domain types.

    1) Parametric types allow to build types from type \args.

    1) Special quotient types.

        + The versatile "universal" quotient type.

        + The quotient field of an integral domain.

        + The rational field.

    1) Hidden \objs must have a name starting with an \_.

    1) ''alias_from'' tries to simplify aliasing from the same \obj.


--------
:update:
--------

[[:api:]]
Types: simplification of the naming of public object (no need to use extra prefix)


-----
:fix:
-----

[[:api:]]
Types: the \prev field type was just a division ring one. We have updated the \specs and add a field type with a mandatory abelian product.


// ---------- //


==
14  (0.0.0-alpha.6)
==

-----
:new:
-----

[[:api:]]
Types: the parsing rule amo::''"{x1, x2, ...}"'' allows to use unbounded \nb of \args.


-----
:fix:
-----

[[:api:]]
Types.

    1) Ring type: clarifications needed about the double structure of the domain set.

    1) The field type needs to say that the "prod" \grp structure is obtained without the zero-like \elt.

    1) The \int type needs to work with "non-\pos" and "non-\neg" \elts instead of "\pos" and "\neg" ones.


// ---------- //


==
13  (0.0.0-alpha.5)
==

-----
:new:
-----

[[:api:]]
Types: the definitions of natural and integer sets look good.


// ---------- //


==
13  (0.0.0-alpha.4)
==

-----
:new:
-----

[[:api:]]
Types: for an endofunction amo::''func f : S -> S'' and amo::''e in S'', we have a built-in recursive rule amo::''iter_set f e'' which is the subset of amo::''S'' obtained from amo:''{e}'' by iteratively applying amo::''f'' a finite number of times.


// ---------- //


==
12  (0.0.0-alpha.3)
==

-----
:new:
-----

[[:api:]]
Types: redefining and erasing axioms is now possible.


// ---------- //


==
12  (0.0.0-alpha.2)
==

-----
:new:
-----

[[:api:]]
Types: the rules look good. We still need to define other default types to identify any missing concepts.


// ---------- //


==
12  (0.0.0-alpha.1)
==

-----
:new:
-----

[[:doc:]]
Naming: conventions have been added.


// ---------- //


==
09  (0.0.0-alpha.0)
==

Starting this \proj that defines an \ascii \dsl made to facilitate the writing and the manipulations of \math objects.
